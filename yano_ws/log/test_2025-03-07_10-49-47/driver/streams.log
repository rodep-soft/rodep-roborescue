[0.035s] Invoking command in '/root/working/rodep_ros2/yano_ws/build/driver': AMENT_PREFIX_PATH=/root/working/rodep_ros2/yano_ws/install/driver:/root/working/rodep_ros2/yano_ws/install/custom_interfaces:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/root/working/rodep_ros2/yano_ws/install/driver:/root/working/rodep_ros2/yano_ws/install/custom_interfaces LD_LIBRARY_PATH=/root/working/rodep_ros2/yano_ws/install/custom_interfaces/lib:${LD_LIBRARY_PATH} PYTHONPATH=/root/working/rodep_ros2/yano_ws/install/custom_interfaces/local/lib/python3.10/dist-packages:${PYTHONPATH} /usr/bin/ctest -C Release -D ExperimentalTest --no-compress-output -V --force-new-ctest-process
[0.046s] UpdateCTestConfiguration  from :/root/working/rodep_ros2/yano_ws/build/driver/CTestConfiguration.ini
[0.046s] Parse Config file:/root/working/rodep_ros2/yano_ws/build/driver/CTestConfiguration.ini
[0.048s]    Site: cf33789d9224
[0.048s]    Build name: (empty)
[0.048s]  Add coverage exclude regular expressions.
[0.048s] Create new tag: 20250307-1049 - Experimental
[0.048s] UpdateCTestConfiguration  from :/root/working/rodep_ros2/yano_ws/build/driver/CTestConfiguration.ini
[0.049s] Parse Config file:/root/working/rodep_ros2/yano_ws/build/driver/CTestConfiguration.ini
[0.049s] Test project /root/working/rodep_ros2/yano_ws/build/driver
[0.049s] Constructing a list of tests
[0.049s] Done constructing a list of tests
[0.049s] Updating test list for fixtures
[0.049s] Added 0 tests to meet fixture requirements
[0.050s] Checking test dependency graph...
[0.050s] Checking test dependency graph end
[0.050s] test 1
[0.050s]     Start 1: cppcheck
[0.050s] 
[0.050s] 1: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/cppcheck.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_cppcheck/cppcheck.txt" "--command" "/opt/ros/humble/bin/ament_cppcheck" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/cppcheck.xunit.xml"
[0.050s] 1: Test timeout computed to be: 300
[0.155s] 1: -- run_test.py: invoking following command in '/root/working/rodep_ros2/yano_ws/src/driver':
[0.156s] 1:  - /opt/ros/humble/bin/ament_cppcheck --xunit-file /root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/cppcheck.xunit.xml
[0.258s] 1: cppcheck 2.7 has known performance issues and therefore will not be used, set the AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS environment variable to override this.
[0.275s] 1: -- run_test.py: return code 0
[0.275s] 1: -- run_test.py: verify result file '/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/cppcheck.xunit.xml'
[0.293s] 1/4 Test #1: cppcheck .........................   Passed    0.25 sec
[0.293s] test 2
[0.293s]     Start 2: lint_cmake
[0.294s] 
[0.295s] 2: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/lint_cmake.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/lint_cmake.xunit.xml"
[0.295s] 2: Test timeout computed to be: 60
[0.364s] 2: -- run_test.py: invoking following command in '/root/working/rodep_ros2/yano_ws/src/driver':
[0.364s] 2:  - /opt/ros/humble/bin/ament_lint_cmake --xunit-file /root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/lint_cmake.xunit.xml
[0.490s] 2: CMakeLists.txt:23: Tab found; please use spaces [whitespace/tabs]
[0.490s] 2: CMakeLists.txt:23: Line ends in whitespace [whitespace/eol]
[0.490s] 2: 
[0.490s] 2: 
[0.490s] 2: 2 errors
[0.508s] 2: -- run_test.py: return code 1
[0.509s] 2: -- run_test.py: verify result file '/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/lint_cmake.xunit.xml'
[0.520s] 2/4 Test #2: lint_cmake .......................***Failed    0.23 sec
[0.520s] test 3
[0.520s]     Start 3: uncrustify
[0.520s] 
[0.521s] 3: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/uncrustify.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_uncrustify/uncrustify.txt" "--command" "/opt/ros/humble/bin/ament_uncrustify" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/uncrustify.xunit.xml"
[0.521s] 3: Test timeout computed to be: 60
[0.598s] 3: -- run_test.py: invoking following command in '/root/working/rodep_ros2/yano_ws/src/driver':
[0.598s] 3:  - /opt/ros/humble/bin/ament_uncrustify --xunit-file /root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/uncrustify.xunit.xml
[0.752s] 3: Code style divergence in file 'src/driver.cpp':
[0.752s] 3: 
[0.752s] 3: --- src/driver.cpp
[0.752s] 3: +++ src/driver.cpp.uncrustify
[0.752s] 3: @@ -6 +6 @@
[0.753s] 3: -#include <std_msgs/msg/bool.hpp> 
[0.753s] 3: +#include <std_msgs/msg/bool.hpp>
[0.753s] 3: @@ -27 +27,2 @@
[0.753s] 3: -class RoboclawDriver {
[0.753s] 3: +class RoboclawDriver
[0.753s] 3: +{
[0.753s] 3: @@ -29,34 +30,39 @@
[0.753s] 3: -    explicit RoboclawDriver(const string& port) : io(), serial(io, port) {
[0.753s] 3: -        try {
[0.754s] 3: -            serial.set_option(serial_port_base::baud_rate(SERIAL_BAUD_RATE));
[0.754s] 3: -            serial.set_option(serial_port_base::character_size(8));
[0.754s] 3: -            serial.set_option(serial_port_base::parity(serial_port_base::parity::none));
[0.754s] 3: -            serial.set_option(serial_port_base::stop_bits(serial_port_base::stop_bits::one));
[0.754s] 3: -            serial.set_option(serial_port_base::flow_control(serial_port_base::flow_control::none));
[0.754s] 3: -        } catch (const boost::system::system_error& e) {
[0.754s] 3: -            throw runtime_error("Failed to configure serial port: " + string(e.what()));
[0.754s] 3: -        }
[0.754s] 3: -    }
[0.754s] 3: -
[0.755s] 3: -    bool setMotorVelocity(int command, double counts_per_sec) {
[0.755s] 3: -        vector<uint8_t> data = {ROBOCLAW_ADDRESS, static_cast<uint8_t>(command)};
[0.755s] 3: -        appendInt32(data, static_cast<int>(counts_per_sec));
[0.755s] 3: -        appendCRC(data);
[0.756s] 3: -        return sendRoboclawCommand(data);
[0.757s] 3: -    }
[0.757s] 3: -
[0.757s] 3: -    bool setPIDConstants(int command, int K_p, int K_i, int K_d, int qpps) {
[0.757s] 3: -        vector<uint8_t> data = {ROBOCLAW_ADDRESS, static_cast<uint8_t>(command)};
[0.757s] 3: -        appendInt32(data, K_d);
[0.757s] 3: -        appendInt32(data, K_p);
[0.757s] 3: -        appendInt32(data, K_i);
[0.757s] 3: -        appendInt32(data, qpps);
[0.757s] 3: -        appendCRC(data);
[0.758s] 3: -        return sendRoboclawCommand(data);
[0.758s] 3: -    }
[0.758s] 3: -
[0.758s] 3: -    bool resetEncoders() {
[0.758s] 3: -        vector<uint8_t> data = {ROBOCLAW_ADDRESS, RESET_QUAD_ENCODER};
[0.758s] 3: -        appendCRC(data);
[0.758s] 3: -        return sendRoboclawCommand(data);
[0.758s] 3: -    }
[0.758s] 3: +  explicit RoboclawDriver(const string & port)
[0.759s] 3: +  : io(), serial(io, port)
[0.759s] 3: +  {
[0.759s] 3: +    try {
[0.759s] 3: +      serial.set_option(serial_port_base::baud_rate(SERIAL_BAUD_RATE));
[0.759s] 3: +      serial.set_option(serial_port_base::character_size(8));
[0.759s] 3: +      serial.set_option(serial_port_base::parity(serial_port_base::parity::none));
[0.759s] 3: +      serial.set_option(serial_port_base::stop_bits(serial_port_base::stop_bits::one));
[0.759s] 3: +      serial.set_option(serial_port_base::flow_control(serial_port_base::flow_control::none));
[0.759s] 3: +    } catch (const boost::system::system_error & e) {
[0.759s] 3: +      throw runtime_error("Failed to configure serial port: " + string(e.what()));
[0.760s] 3: +    }
[0.760s] 3: +  }
[0.760s] 3: +
[0.760s] 3: +  bool setMotorVelocity(int command, double counts_per_sec)
[0.760s] 3: +  {
[0.760s] 3: +    vector<uint8_t> data = {ROBOCLAW_ADDRESS, static_cast<uint8_t>(command)};
[0.760s] 3: +    appendInt32(data, static_cast<int>(counts_per_sec));
[0.760s] 3: +    appendCRC(data);
[0.760s] 3: +    return sendRoboclawCommand(data);
[0.761s] 3: +  }
[0.761s] 3: +
[0.761s] 3: +  bool setPIDConstants(int command, int K_p, int K_i, int K_d, int qpps)
[0.761s] 3: +  {
[0.761s] 3: +    vector<uint8_t> data = {ROBOCLAW_ADDRESS, static_cast<uint8_t>(command)};
[0.761s] 3: +    appendInt32(data, K_d);
[0.761s] 3: +    appendInt32(data, K_p);
[0.761s] 3: +    appendInt32(data, K_i);
[0.761s] 3: +    appendInt32(data, qpps);
[0.762s] 3: +    appendCRC(data);
[0.762s] 3: +    return sendRoboclawCommand(data);
[0.762s] 3: +  }
[0.762s] 3: +
[0.762s] 3: +  bool resetEncoders()
[0.762s] 3: +  {
[0.762s] 3: +    vector<uint8_t> data = {ROBOCLAW_ADDRESS, RESET_QUAD_ENCODER};
[0.762s] 3: +    appendCRC(data);
[0.762s] 3: +    return sendRoboclawCommand(data);
[0.763s] 3: +  }
[0.763s] 3: @@ -65,39 +71,45 @@
[0.763s] 3: -    io_service io;
[0.763s] 3: -    serial_port serial;
[0.763s] 3: -
[0.763s] 3: -    bool sendRoboclawCommand(const vector<uint8_t>& data) {
[0.763s] 3: -        try {
[0.763s] 3: -            write(serial, buffer(data));
[0.763s] 3: -            uint8_t response;
[0.764s] 3: -            read(serial, buffer(&response, 1));
[0.764s] 3: -            RCLCPP_DEBUG(rclcpp::get_logger("RoboclawDriver"), "Received Response: 0x%02X", response);
[0.764s] 3: -            return true;
[0.764s] 3: -        } catch (const boost::system::system_error& e) {
[0.764s] 3: -            RCLCPP_ERROR(rclcpp::get_logger("RoboclawDriver"), "Serial Communication Error: %s", e.what());
[0.764s] 3: -            return false;
[0.764s] 3: -        }
[0.764s] 3: -    }
[0.764s] 3: -
[0.764s] 3: -    uint16_t calculateCRC(const vector<uint8_t>& data) {
[0.765s] 3: -        uint16_t crc = 0;
[0.765s] 3: -        for (auto byte : data) {
[0.765s] 3: -            crc ^= static_cast<uint16_t>(byte) << 8;
[0.765s] 3: -            for (int i = 0; i < 8; i++) {
[0.765s] 3: -                crc = (crc & 0x8000) ? (crc << 1) ^ 0x1021 : (crc << 1);
[0.765s] 3: -            }
[0.765s] 3: -        }
[0.765s] 3: -        return crc;
[0.765s] 3: -    }
[0.766s] 3: -
[0.766s] 3: -    // CRC追加
[0.766s] 3: -    void appendCRC(vector<uint8_t>& data) {
[0.766s] 3: -        uint16_t crc = calculateCRC(data);
[0.766s] 3: -        data.push_back(static_cast<uint8_t>(crc >> 8));
[0.766s] 3: -        data.push_back(static_cast<uint8_t>(crc & 0xFF));
[0.766s] 3: -    }
[0.766s] 3: -
[0.766s] 3: -    void appendInt32(vector<uint8_t>& data, int value) {
[0.767s] 3: -        for (int i = 3; i >= 0; --i) {
[0.767s] 3: -            data.push_back(static_cast<uint8_t>((value >> (8 * i)) & 0xFF));
[0.767s] 3: -        }
[0.767s] 3: -    }
[0.767s] 3: +  io_service io;
[0.767s] 3: +  serial_port serial;
[0.767s] 3: +
[0.767s] 3: +  bool sendRoboclawCommand(const vector<uint8_t> & data)
[0.767s] 3: +  {
[0.768s] 3: +    try {
[0.768s] 3: +      write(serial, buffer(data));
[0.768s] 3: +      uint8_t response;
[0.768s] 3: +      read(serial, buffer(&response, 1));
[0.768s] 3: +      RCLCPP_DEBUG(rclcpp::get_logger("RoboclawDriver"), "Received Response: 0x%02X", response);
[0.768s] 3: +      return true;
[0.768s] 3: +    } catch (const boost::system::system_error & e) {
[0.768s] 3: +      RCLCPP_ERROR(
[0.769s] 3: +        rclcpp::get_logger("RoboclawDriver"), "Serial Communication Error: %s",
[0.769s] 3: +        e.what());
[0.769s] 3: +      return false;
[0.769s] 3: +    }
[0.769s] 3: +  }
[0.769s] 3: +
[0.769s] 3: +  uint16_t calculateCRC(const vector<uint8_t> & data)
[0.770s] 3: +  {
[0.770s] 3: +    uint16_t crc = 0;
[0.770s] 3: +    for (auto byte : data) {
[0.770s] 3: +      crc ^= static_cast<uint16_t>(byte) << 8;
[0.770s] 3: +      for (int i = 0; i < 8; i++) {
[0.770s] 3: +        crc = (crc & 0x8000) ? (crc << 1) ^ 0x1021 : (crc << 1);
[0.770s] 3: +      }
[0.771s] 3: +    }
[0.771s] 3: +    return crc;
[0.771s] 3: +  }
[0.771s] 3: +
[0.771s] 3: +  // CRC追加
[0.771s] 3: +  void appendCRC(vector<uint8_t> & data)
[0.771s] 3: +  {
[0.771s] 3: +    uint16_t crc = calculateCRC(data);
[0.772s] 3: +    data.push_back(static_cast<uint8_t>(crc >> 8));
[0.772s] 3: +    data.push_back(static_cast<uint8_t>(crc & 0xFF));
[0.772s] 3: +  }
[0.772s] 3: +
[0.772s] 3: +  void appendInt32(vector<uint8_t> & data, int value)
[0.772s] 3: +  {
[0.772s] 3: +    for (int i = 3; i >= 0; --i) {
[0.772s] 3: +      data.push_back(static_cast<uint8_t>((value >> (8 * i)) & 0xFF));
[0.773s] 3: +    }
[0.773s] 3: +  }
[0.773s] 3: @@ -107 +119,2 @@
[0.773s] 3: -class Driver : public rclcpp::Node {
[0.773s] 3: +class Driver : public rclcpp::Node
[0.773s] 3: +{
[0.773s] 3: @@ -109,22 +122,25 @@
[0.773s] 3: -    Driver() : Node("driver"), roboclaw("/dev/ttyACM0") { 
[0.774s] 3: -        declare_parameter("crawler_circumference", 0.39);
[0.774s] 3: -        declare_parameter("counts_per_rev", 256); // quad pulses per rev = counts per rev
[0.774s] 3: -        declare_parameter("gearhead_ratio", 66); // 減速比
[0.774s] 3: -        declare_parameter("pulley_ratio", 2);
[0.774s] 3: -
[0.774s] 3: -        crawler_circumference_ = get_parameter("crawler_circumference").as_double();
[0.774s] 3: -        counts_per_rev_ = get_parameter("counts_per_rev").as_int();
[0.774s] 3: -        gearhead_ratio_ = get_parameter("gearhead_ratio").as_int();
[0.775s] 3: -        pulley_ratio_ = get_parameter("pulley_ratio").as_int();
[0.775s] 3: -
[0.775s] 3: -        // velocityをqppsに変換する際に用いる定数
[0.775s] 3: -        counts_per_meter_ = (counts_per_rev_ * gearhead_ratio_ * pulley_ratio_) / crawler_circumference_;
[0.775s] 3: -
[0.775s] 3: -        subscription_ = create_subscription<custom_interfaces::msg::DriverVelocity>(
[0.775s] 3: -            "/operator", 10, bind(&Driver::driver_callback, this, _1));
[0.776s] 3: -
[0.776s] 3: -        estop_subscription_ = create_subscription<std_msgs::msg::Bool>(
[0.776s] 3: -            "/emergency_stop", 10, bind(&Driver::estop_callback, this, _1));
[0.776s] 3: -
[0.776s] 3: -        init();
[0.776s] 3: -    }
[0.777s] 3: +  Driver()
[0.777s] 3: +  : Node("driver"), roboclaw("/dev/ttyACM0")
[0.777s] 3: +  {
[0.777s] 3: +    declare_parameter("crawler_circumference", 0.39);
[0.777s] 3: +    declare_parameter("counts_per_rev", 256);     // quad pulses per rev = counts per rev
[0.777s] 3: +    declare_parameter("gearhead_ratio", 66);     // 減速比
[0.777s] 3: +    declare_parameter("pulley_ratio", 2);
[0.777s] 3: +
[0.778s] 3: +    crawler_circumference_ = get_parameter("crawler_circumference").as_double();
[0.778s] 3: +    counts_per_rev_ = get_parameter("counts_per_rev").as_int();
[0.778s] 3: +    gearhead_ratio_ = get_parameter("gearhead_ratio").as_int();
[0.778s] 3: +    pulley_ratio_ = get_parameter("pulley_ratio").as_int();
[0.778s] 3: +
[0.778s] 3: +    // velocityをqppsに変換する際に用いる定数
[0.778s] 3: +    counts_per_meter_ = (counts_per_rev_ * gearhead_ratio_ * pulley_ratio_) /
[0.778s] 3: +      crawler_circumference_;
[0.778s] 3: +
[0.778s] 3: +    subscription_ = create_subscription<custom_interfaces::msg::DriverVelocity>(
[0.778s] 3: +      "/operator", 10, bind(&Driver::driver_callback, this, _1));
[0.779s] 3: +
[0.779s] 3: +    estop_subscription_ = create_subscription<std_msgs::msg::Bool>(
[0.779s] 3: +      "/emergency_stop", 10, bind(&Driver::estop_callback, this, _1));
[0.779s] 3: +
[0.779s] 3: +    init();
[0.779s] 3: +  }
[0.779s] 3: @@ -133,53 +149,57 @@
[0.779s] 3: -    RoboclawDriver roboclaw;
[0.779s] 3: -    double crawler_circumference_;
[0.780s] 3: -    int counts_per_rev_;
[0.780s] 3: -    int gearhead_ratio_;
[0.780s] 3: -    int pulley_ratio_;
[0.780s] 3: -    double counts_per_meter_;
[0.780s] 3: -    bool estop_active_ = false;  // E-stop state
[0.780s] 3: -
[0.780s] 3: -    rclcpp::Subscription<custom_interfaces::msg::DriverVelocity>::SharedPtr subscription_;
[0.780s] 3: -    rclcpp::Subscription<std_msgs::msg::Bool>::SharedPtr estop_subscription_;
[0.780s] 3: -
[0.780s] 3: -    double velocity_to_counts_per_sec(double velocity) const {
[0.781s] 3: -        return velocity * counts_per_meter_;
[0.781s] 3: -    }
[0.781s] 3: -
[0.781s] 3: -    void init() {
[0.781s] 3: -        roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, 0);
[0.781s] 3: -        roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, 0);
[0.781s] 3: -        roboclaw.setPIDConstants(M1_SET_PID_CONSTANTS_COMMAND, 0, 0, 0, QPPS);
[0.781s] 3: -        roboclaw.setPIDConstants(M2_SET_PID_CONSTANTS_COMMAND, 0, 0, 0, QPPS);
[0.781s] 3: -        roboclaw.resetEncoders();
[0.782s] 3: -    }
[0.782s] 3: -
[0.782s] 3: -    void driver_callback(const custom_interfaces::msg::DriverVelocity& msg) {
[0.782s] 3: -        if (estop_active_) {
[0.782s] 3: -            RCLCPP_WARN(get_logger(), "E-stop is active. Ignoring motor commands.");
[0.782s] 3: -            return;
[0.782s] 3: -        }
[0.782s] 3: -
[0.782s] 3: -        double M1_counts_per_sec = velocity_to_counts_per_sec(msg.m1_vel);
[0.783s] 3: -        double M2_counts_per_sec = velocity_to_counts_per_sec(msg.m2_vel);
[0.783s] 3: -
[0.783s] 3: -        if (!roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, M1_counts_per_sec)) {
[0.783s] 3: -            RCLCPP_ERROR(get_logger(), "Failed to send command to M1 motor");
[0.783s] 3: -        }
[0.783s] 3: -        if (!roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, M2_counts_per_sec)) {
[0.783s] 3: -            RCLCPP_ERROR(get_logger(), "Failed to send command to M2 motor");
[0.783s] 3: -        }
[0.783s] 3: -    }
[0.784s] 3: -
[0.784s] 3: -    void estop_callback(const std_msgs::msg::Bool::SharedPtr msg) {
[0.784s] 3: -        estop_active_ = msg->data;
[0.784s] 3: -
[0.784s] 3: -        if (estop_active_) {
[0.784s] 3: -            RCLCPP_WARN(get_logger(), "E-stop activated. Stopping all motors.");
[0.784s] 3: -
[0.784s] 3: -            // Send zero velocity commands to stop motors
[0.784s] 3: -            roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, 0);
[0.785s] 3: -            roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, 0);
[0.785s] 3: -        } else {
[0.785s] 3: -            RCLCPP_INFO(get_logger(), "E-stop deactivated. Resuming normal operation.");
[0.785s] 3: -        }
[0.785s] 3: -    }
[0.785s] 3: +  RoboclawDriver roboclaw;
[0.785s] 3: +  double crawler_circumference_;
[0.785s] 3: +  int counts_per_rev_;
[0.785s] 3: +  int gearhead_ratio_;
[0.786s] 3: +  int pulley_ratio_;
[0.786s] 3: +  double counts_per_meter_;
[0.786s] 3: +  bool estop_active_ = false;    // E-stop state
[0.786s] 3: +
[0.786s] 3: +  rclcpp::Subscription<custom_interfaces::msg::DriverVelocity>::SharedPtr subscription_;
[0.786s] 3: +  rclcpp::Subscription<std_msgs::msg::Bool>::SharedPtr estop_subscription_;
[0.786s] 3: +
[0.787s] 3: +  double velocity_to_counts_per_sec(double velocity) const
[0.787s] 3: +  {
[0.787s] 3: +    return velocity * counts_per_meter_;
[0.787s] 3: +  }
[0.787s] 3: +
[0.787s] 3: +  void init()
[0.787s] 3: +  {
[0.787s] 3: +    roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, 0);
[0.788s] 3: +    roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, 0);
[0.788s] 3: +    roboclaw.setPIDConstants(M1_SET_PID_CONSTANTS_COMMAND, 0, 0, 0, QPPS);
[0.788s] 3: +    roboclaw.setPIDConstants(M2_SET_PID_CONSTANTS_COMMAND, 0, 0, 0, QPPS);
[0.788s] 3: +    roboclaw.resetEncoders();
[0.788s] 3: +  }
[0.788s] 3: +
[0.788s] 3: +  void driver_callback(const custom_interfaces::msg::DriverVelocity & msg)
[0.788s] 3: +  {
[0.788s] 3: +    if (estop_active_) {
[0.789s] 3: +      RCLCPP_WARN(get_logger(), "E-stop is active. Ignoring motor commands.");
[0.789s] 3: +      return;
[0.789s] 3: +    }
[0.789s] 3: +
[0.789s] 3: +    double M1_counts_per_sec = velocity_to_counts_per_sec(msg.m1_vel);
[0.789s] 3: +    double M2_counts_per_sec = velocity_to_counts_per_sec(msg.m2_vel);
[0.789s] 3: +
[0.789s] 3: +    if (!roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, M1_counts_per_sec)) {
[0.790s] 3: +      RCLCPP_ERROR(get_logger(), "Failed to send command to M1 motor");
[0.790s] 3: +    }
[0.790s] 3: +    if (!roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, M2_counts_per_sec)) {
[0.790s] 3: +      RCLCPP_ERROR(get_logger(), "Failed to send command to M2 motor");
[0.790s] 3: +    }
[0.790s] 3: +  }
[0.790s] 3: +
[0.790s] 3: +  void estop_callback(const std_msgs::msg::Bool::SharedPtr msg)
[0.791s] 3: +  {
[0.791s] 3: +    estop_active_ = msg->data;
[0.791s] 3: +
[0.791s] 3: +    if (estop_active_) {
[0.791s] 3: +      RCLCPP_WARN(get_logger(), "E-stop activated. Stopping all motors.");
[0.791s] 3: +
[0.791s] 3: +      // Send zero velocity commands to stop motors
[0.792s] 3: +      roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, 0);
[0.792s] 3: +      roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, 0);
[0.792s] 3: +    } else {
[0.792s] 3: +      RCLCPP_INFO(get_logger(), "E-stop deactivated. Resuming normal operation.");
[0.792s] 3: +    }
[0.792s] 3: +  }
[0.793s] 3: @@ -188,5 +208,6 @@
[0.793s] 3: -int main(int argc, char* argv[]) {
[0.793s] 3: -    rclcpp::init(argc, argv);
[0.793s] 3: -    rclcpp::spin(std::make_shared<Driver>());
[0.793s] 3: -    rclcpp::shutdown();
[0.793s] 3: -    return 0;
[0.793s] 3: +int main(int argc, char * argv[])
[0.794s] 3: +{
[0.794s] 3: +  rclcpp::init(argc, argv);
[0.794s] 3: +  rclcpp::spin(std::make_shared<Driver>());
[0.794s] 3: +  rclcpp::shutdown();
[0.794s] 3: +  return 0;
[0.794s] 3: 
[0.794s] 3: 1 files with code style divergence
[0.794s] 3: -- run_test.py: return code 1
[0.795s] 3: -- run_test.py: verify result file '/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/uncrustify.xunit.xml'
[0.795s] 3/4 Test #3: uncrustify .......................***Failed    0.27 sec
[0.795s] test 4
[0.795s]     Start 4: xmllint
[0.795s] 
[0.795s] 4: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/xmllint.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/xmllint.xunit.xml"
[0.795s] 4: Test timeout computed to be: 60
[0.899s] 4: -- run_test.py: invoking following command in '/root/working/rodep_ros2/yano_ws/src/driver':
[0.899s] 4:  - /opt/ros/humble/bin/ament_xmllint --xunit-file /root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/xmllint.xunit.xml
[1.531s] 4: File 'package.xml' is valid
[1.531s] 4: 
[1.531s] 4: No problems found
[1.545s] 4: -- run_test.py: return code 0
[1.545s] 4: -- run_test.py: verify result file '/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/xmllint.xunit.xml'
[1.557s] 4/4 Test #4: xmllint ..........................   Passed    0.76 sec
[1.558s] 
[1.558s] 50% tests passed[0;0m, [0;31m2 tests failed[0;0m out of 4
[1.558s] 
[1.558s] Label Time Summary:
[1.558s] cppcheck      =   0.25 sec*proc (1 test)
[1.558s] lint_cmake    =   0.23 sec*proc (1 test)
[1.558s] linter        =   1.51 sec*proc (4 tests)
[1.559s] uncrustify    =   0.27 sec*proc (1 test)
[1.559s] xmllint       =   0.76 sec*proc (1 test)
[1.559s] 
[1.559s] Total Test time (real) =   1.51 sec
[1.559s] 
[1.559s] The following tests FAILED:
[1.559s] 	[0;31m  2 - lint_cmake (Failed)[0;0m
[1.560s] 	[0;31m  3 - uncrustify (Failed)[0;0m
[1.560s] Errors while running CTest
[1.560s] Output from these tests are in: /root/working/rodep_ros2/yano_ws/build/driver/Testing/Temporary/LastTest.log
[1.560s] Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.
[1.563s] Invoked command in '/root/working/rodep_ros2/yano_ws/build/driver' returned '8': AMENT_PREFIX_PATH=/root/working/rodep_ros2/yano_ws/install/driver:/root/working/rodep_ros2/yano_ws/install/custom_interfaces:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/root/working/rodep_ros2/yano_ws/install/driver:/root/working/rodep_ros2/yano_ws/install/custom_interfaces LD_LIBRARY_PATH=/root/working/rodep_ros2/yano_ws/install/custom_interfaces/lib:${LD_LIBRARY_PATH} PYTHONPATH=/root/working/rodep_ros2/yano_ws/install/custom_interfaces/local/lib/python3.10/dist-packages:${PYTHONPATH} /usr/bin/ctest -C Release -D ExperimentalTest --no-compress-output -V --force-new-ctest-process
