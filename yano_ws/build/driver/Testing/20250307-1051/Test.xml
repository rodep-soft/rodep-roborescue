<?xml version="1.0" encoding="UTF-8"?>
<Site BuildName="(empty)"
	BuildStamp="20250307-1051-Experimental"
	Name="cf33789d9224"
	Generator="ctest-3.22.1"
	CompilerName="/usr/bin/c++"
	CompilerVersion="11.4.0"
	OSName="Linux"
	Hostname="cf33789d9224"
	OSRelease="6.12.12-2-MANJARO"
	OSVersion="#1 SMP PREEMPT_DYNAMIC Mon, 03 Feb 2025 16:27:19 +0000"
	OSPlatform="x86_64"
	Is64Bits="1"
	VendorString="GenuineIntel"
	VendorID="Intel Corporation"
	FamilyID="6"
	ModelID="78"
	ProcessorCacheSize="4096"
	NumberOfLogicalCPU="4"
	NumberOfPhysicalCPU="2"
	TotalVirtualMemory="10239"
	TotalPhysicalMemory="15864"
	LogicalProcessorsPerPhysical="2"
	ProcessorClockFrequency="3012.8"
	>
	<Testing>
		<StartDateTime>Mar 07 10:51 UTC</StartDateTime>
		<StartTestTime>1741344672</StartTestTime>
		<TestList>
			<Test>./cppcheck</Test>
			<Test>./lint_cmake</Test>
			<Test>./uncrustify</Test>
			<Test>./xmllint</Test>
		</TestList>
		<Test Status="passed">
			<Name>cppcheck</Name>
			<Path>.</Path>
			<FullName>./cppcheck</FullName>
			<FullCommandLine>/usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/cppcheck.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_cppcheck/cppcheck.txt" "--command" "/opt/ros/humble/bin/ament_cppcheck" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/cppcheck.xunit.xml"</FullCommandLine>
			<Results>
				<NamedMeasurement type="numeric/double" name="Execution Time">
					<Value>0.191561</Value>
				</NamedMeasurement>
				<NamedMeasurement type="numeric/double" name="Processors">
					<Value>1</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Completion Status">
					<Value>Completed</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Command Line">
					<Value>/usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/cppcheck.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_cppcheck/cppcheck.txt" "--command" "/opt/ros/humble/bin/ament_cppcheck" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/cppcheck.xunit.xml"</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Environment">
					<Value>#CTEST_RESOURCE_GROUP_COUNT=</Value>
				</NamedMeasurement>
				<Measurement>
					<Value>-- run_test.py: invoking following command in '/root/working/rodep_ros2/yano_ws/src/driver':
 - /opt/ros/humble/bin/ament_cppcheck --xunit-file /root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/cppcheck.xunit.xml
cppcheck 2.7 has known performance issues and therefore will not be used, set the AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS environment variable to override this.
-- run_test.py: return code 0
-- run_test.py: verify result file '/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/cppcheck.xunit.xml'
</Value>
				</Measurement>
			</Results>
			<Labels>
				<Label>cppcheck</Label>
				<Label>linter</Label>
			</Labels>
		</Test>
		<Test Status="failed">
			<Name>lint_cmake</Name>
			<Path>.</Path>
			<FullName>./lint_cmake</FullName>
			<FullCommandLine>/usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/lint_cmake.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/lint_cmake.xunit.xml"</FullCommandLine>
			<Results>
				<NamedMeasurement type="text/string" name="Exit Code">
					<Value>Failed</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Exit Value">
					<Value>1</Value>
				</NamedMeasurement>
				<NamedMeasurement type="numeric/double" name="Execution Time">
					<Value>0.182561</Value>
				</NamedMeasurement>
				<NamedMeasurement type="numeric/double" name="Processors">
					<Value>1</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Completion Status">
					<Value>Completed</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Command Line">
					<Value>/usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/lint_cmake.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/lint_cmake.xunit.xml"</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Environment">
					<Value>#CTEST_RESOURCE_GROUP_COUNT=</Value>
				</NamedMeasurement>
				<Measurement>
					<Value>-- run_test.py: invoking following command in '/root/working/rodep_ros2/yano_ws/src/driver':
 - /opt/ros/humble/bin/ament_lint_cmake --xunit-file /root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/lint_cmake.xunit.xml
CMakeLists.txt:23: Tab found; please use spaces [whitespace/tabs]
CMakeLists.txt:23: Line ends in whitespace [whitespace/eol]


2 errors
-- run_test.py: return code 1
-- run_test.py: verify result file '/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/lint_cmake.xunit.xml'
</Value>
				</Measurement>
			</Results>
			<Labels>
				<Label>lint_cmake</Label>
				<Label>linter</Label>
			</Labels>
		</Test>
		<Test Status="failed">
			<Name>uncrustify</Name>
			<Path>.</Path>
			<FullName>./uncrustify</FullName>
			<FullCommandLine>/usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/uncrustify.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_uncrustify/uncrustify.txt" "--command" "/opt/ros/humble/bin/ament_uncrustify" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/uncrustify.xunit.xml"</FullCommandLine>
			<Results>
				<NamedMeasurement type="text/string" name="Exit Code">
					<Value>Failed</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Exit Value">
					<Value>1</Value>
				</NamedMeasurement>
				<NamedMeasurement type="numeric/double" name="Execution Time">
					<Value>0.214384</Value>
				</NamedMeasurement>
				<NamedMeasurement type="numeric/double" name="Processors">
					<Value>1</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Completion Status">
					<Value>Completed</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Command Line">
					<Value>/usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/uncrustify.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_uncrustify/uncrustify.txt" "--command" "/opt/ros/humble/bin/ament_uncrustify" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/uncrustify.xunit.xml"</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Environment">
					<Value>#CTEST_RESOURCE_GROUP_COUNT=</Value>
				</NamedMeasurement>
				<Measurement>
					<Value>-- run_test.py: invoking following command in '/root/working/rodep_ros2/yano_ws/src/driver':
 - /opt/ros/humble/bin/ament_uncrustify --xunit-file /root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/uncrustify.xunit.xml
Code style divergence in file 'src/driver.cpp':

--- src/driver.cpp
+++ src/driver.cpp.uncrustify
@@ -6 +6 @@
-#include &lt;std_msgs/msg/bool.hpp&gt; 
+#include &lt;std_msgs/msg/bool.hpp&gt;
@@ -27 +27,2 @@
-class RoboclawDriver {
+class RoboclawDriver
+{
@@ -29,34 +30,39 @@
-    explicit RoboclawDriver(const string&amp; port) : io(), serial(io, port) {
-        try {
-            serial.set_option(serial_port_base::baud_rate(SERIAL_BAUD_RATE));
-            serial.set_option(serial_port_base::character_size(8));
-            serial.set_option(serial_port_base::parity(serial_port_base::parity::none));
-            serial.set_option(serial_port_base::stop_bits(serial_port_base::stop_bits::one));
-            serial.set_option(serial_port_base::flow_control(serial_port_base::flow_control::none));
-        } catch (const boost::system::system_error&amp; e) {
-            throw runtime_error("Failed to configure serial port: " + string(e.what()));
-        }
-    }
-
-    bool setMotorVelocity(int command, double counts_per_sec) {
-        vector&lt;uint8_t&gt; data = {ROBOCLAW_ADDRESS, static_cast&lt;uint8_t&gt;(command)};
-        appendInt32(data, static_cast&lt;int&gt;(counts_per_sec));
-        appendCRC(data);
-        return sendRoboclawCommand(data);
-    }
-
-    bool setPIDConstants(int command, int K_p, int K_i, int K_d, int qpps) {
-        vector&lt;uint8_t&gt; data = {ROBOCLAW_ADDRESS, static_cast&lt;uint8_t&gt;(command)};
-        appendInt32(data, K_d);
-        appendInt32(data, K_p);
-        appendInt32(data, K_i);
-        appendInt32(data, qpps);
-        appendCRC(data);
-        return sendRoboclawCommand(data);
-    }
-
-    bool resetEncoders() {
-        vector&lt;uint8_t&gt; data = {ROBOCLAW_ADDRESS, RESET_QUAD_ENCODER};
-        appendCRC(data);
-        return sendRoboclawCommand(data);
-    }
+  explicit RoboclawDriver(const string &amp; port)
+  : io(), serial(io, port)
+  {
+    try {
+      serial.set_option(serial_port_base::baud_rate(SERIAL_BAUD_RATE));
+      serial.set_option(serial_port_base::character_size(8));
+      serial.set_option(serial_port_base::parity(serial_port_base::parity::none));
+      serial.set_option(serial_port_base::stop_bits(serial_port_base::stop_bits::one));
+      serial.set_option(serial_port_base::flow_control(serial_port_base::flow_control::none));
+    } catch (const boost::system::system_error &amp; e) {
+      throw runtime_error("Failed to configure serial port: " + string(e.what()));
+    }
+  }
+
+  bool setMotorVelocity(int command, double counts_per_sec)
+  {
+    vector&lt;uint8_t&gt; data = {ROBOCLAW_ADDRESS, static_cast&lt;uint8_t&gt;(command)};
+    appendInt32(data, static_cast&lt;int&gt;(counts_per_sec));
+    appendCRC(data);
+    return sendRoboclawCommand(data);
+  }
+
+  bool setPIDConstants(int command, int K_p, int K_i, int K_d, int qpps)
+  {
+    vector&lt;uint8_t&gt; data = {ROBOCLAW_ADDRESS, static_cast&lt;uint8_t&gt;(command)};
+    appendInt32(data, K_d);
+    appendInt32(data, K_p);
+    appendInt32(data, K_i);
+    appendInt32(data, qpps);
+    appendCRC(data);
+    return sendRoboclawCommand(data);
+  }
+
+  bool resetEncoders()
+  {
+    vector&lt;uint8_t&gt; data = {ROBOCLAW_ADDRESS, RESET_QUAD_ENCODER};
+    appendCRC(data);
+    return sendRoboclawCommand(data);
+  }
@@ -65,39 +71,45 @@
-    io_service io;
-    serial_port serial;
-
-    bool sendRoboclawCommand(const vector&lt;uint8_t&gt;&amp; data) {
-        try {
-            write(serial, buffer(data));
-            uint8_t response;
-            read(serial, buffer(&amp;response, 1));
-            RCLCPP_DEBUG(rclcpp::get_logger("RoboclawDriver"), "Received Response: 0x%02X", response);
-            return true;
-        } catch (const boost::system::system_error&amp; e) {
-            RCLCPP_ERROR(rclcpp::get_logger("RoboclawDriver"), "Serial Communication Error: %s", e.what());
-            return false;
-        }
-    }
-
-    uint16_t calculateCRC(const vector&lt;uint8_t&gt;&amp; data) {
-        uint16_t crc = 0;
-        for (auto byte : data) {
-            crc ^= static_cast&lt;uint16_t&gt;(byte) &lt;&lt; 8;
-            for (int i = 0; i &lt; 8; i++) {
-                crc = (crc &amp; 0x8000) ? (crc &lt;&lt; 1) ^ 0x1021 : (crc &lt;&lt; 1);
-            }
-        }
-        return crc;
-    }
-
-    // CRC追加
-    void appendCRC(vector&lt;uint8_t&gt;&amp; data) {
-        uint16_t crc = calculateCRC(data);
-        data.push_back(static_cast&lt;uint8_t&gt;(crc &gt;&gt; 8));
-        data.push_back(static_cast&lt;uint8_t&gt;(crc &amp; 0xFF));
-    }
-
-    void appendInt32(vector&lt;uint8_t&gt;&amp; data, int value) {
-        for (int i = 3; i &gt;= 0; --i) {
-            data.push_back(static_cast&lt;uint8_t&gt;((value &gt;&gt; (8 * i)) &amp; 0xFF));
-        }
-    }
+  io_service io;
+  serial_port serial;
+
+  bool sendRoboclawCommand(const vector&lt;uint8_t&gt; &amp; data)
+  {
+    try {
+      write(serial, buffer(data));
+      uint8_t response;
+      read(serial, buffer(&amp;response, 1));
+      RCLCPP_DEBUG(rclcpp::get_logger("RoboclawDriver"), "Received Response: 0x%02X", response);
+      return true;
+    } catch (const boost::system::system_error &amp; e) {
+      RCLCPP_ERROR(
+        rclcpp::get_logger("RoboclawDriver"), "Serial Communication Error: %s",
+        e.what());
+      return false;
+    }
+  }
+
+  uint16_t calculateCRC(const vector&lt;uint8_t&gt; &amp; data)
+  {
+    uint16_t crc = 0;
+    for (auto byte : data) {
+      crc ^= static_cast&lt;uint16_t&gt;(byte) &lt;&lt; 8;
+      for (int i = 0; i &lt; 8; i++) {
+        crc = (crc &amp; 0x8000) ? (crc &lt;&lt; 1) ^ 0x1021 : (crc &lt;&lt; 1);
+      }
+    }
+    return crc;
+  }
+
+  // CRC追加
+  void appendCRC(vector&lt;uint8_t&gt; &amp; data)
+  {
+    uint16_t crc = calculateCRC(data);
+    data.push_back(static_cast&lt;uint8_t&gt;(crc &gt;&gt; 8));
+    data.push_back(static_cast&lt;uint8_t&gt;(crc &amp; 0xFF));
+  }
+
+  void appendInt32(vector&lt;uint8_t&gt; &amp; data, int value)
+  {
+    for (int i = 3; i &gt;= 0; --i) {
+      data.push_back(static_cast&lt;uint8_t&gt;((value &gt;&gt; (8 * i)) &amp; 0xFF));
+    }
+  }
@@ -107 +119,2 @@
-class Driver : public rclcpp::Node {
+class Driver : public rclcpp::Node
+{
@@ -109,22 +122,25 @@
-    Driver() : Node("driver"), roboclaw("/dev/ttyACM0") { 
-        declare_parameter("crawler_circumference", 0.39);
-        declare_parameter("counts_per_rev", 256); // quad pulses per rev = counts per rev
-        declare_parameter("gearhead_ratio", 66); // 減速比
-        declare_parameter("pulley_ratio", 2);
-
-        crawler_circumference_ = get_parameter("crawler_circumference").as_double();
-        counts_per_rev_ = get_parameter("counts_per_rev").as_int();
-        gearhead_ratio_ = get_parameter("gearhead_ratio").as_int();
-        pulley_ratio_ = get_parameter("pulley_ratio").as_int();
-
-        // velocityをqppsに変換する際に用いる定数
-        counts_per_meter_ = (counts_per_rev_ * gearhead_ratio_ * pulley_ratio_) / crawler_circumference_;
-
-        subscription_ = create_subscription&lt;custom_interfaces::msg::DriverVelocity&gt;(
-            "/operator", 10, bind(&amp;Driver::driver_callback, this, _1));
-
-        estop_subscription_ = create_subscription&lt;std_msgs::msg::Bool&gt;(
-            "/emergency_stop", 10, bind(&amp;Driver::estop_callback, this, _1));
-
-        init();
-    }
+  Driver()
+  : Node("driver"), roboclaw("/dev/ttyACM0")
+  {
+    declare_parameter("crawler_circumference", 0.39);
+    declare_parameter("counts_per_rev", 256);     // quad pulses per rev = counts per rev
+    declare_parameter("gearhead_ratio", 66);     // 減速比
+    declare_parameter("pulley_ratio", 2);
+
+    crawler_circumference_ = get_parameter("crawler_circumference").as_double();
+    counts_per_rev_ = get_parameter("counts_per_rev").as_int();
+    gearhead_ratio_ = get_parameter("gearhead_ratio").as_int();
+    pulley_ratio_ = get_parameter("pulley_ratio").as_int();
+
+    // velocityをqppsに変換する際に用いる定数
+    counts_per_meter_ = (counts_per_rev_ * gearhead_ratio_ * pulley_ratio_) /
+      crawler_circumference_;
+
+    subscription_ = create_subscription&lt;custom_interfaces::msg::DriverVelocity&gt;(
+      "/operator", 10, bind(&amp;Driver::driver_callback, this, _1));
+
+    estop_subscription_ = create_subscription&lt;std_msgs::msg::Bool&gt;(
+      "/emergency_stop", 10, bind(&amp;Driver::estop_callback, this, _1));
+
+    init();
+  }
@@ -133,53 +149,57 @@
-    RoboclawDriver roboclaw;
-    double crawler_circumference_;
-    int counts_per_rev_;
-    int gearhead_ratio_;
-    int pulley_ratio_;
-    double counts_per_meter_;
-    bool estop_active_ = false;  // E-stop state
-
-    rclcpp::Subscription&lt;custom_interfaces::msg::DriverVelocity&gt;::SharedPtr subscription_;
-    rclcpp::Subscription&lt;std_msgs::msg::Bool&gt;::SharedPtr estop_subscription_;
-
-    double velocity_to_counts_per_sec(double velocity) const {
-        return velocity * counts_per_meter_;
-    }
-
-    void init() {
-        roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, 0);
-        roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, 0);
-        roboclaw.setPIDConstants(M1_SET_PID_CONSTANTS_COMMAND, 0, 0, 0, QPPS);
-        roboclaw.setPIDConstants(M2_SET_PID_CONSTANTS_COMMAND, 0, 0, 0, QPPS);
-        roboclaw.resetEncoders();
-    }
-
-    void driver_callback(const custom_interfaces::msg::DriverVelocity&amp; msg) {
-        if (estop_active_) {
-            RCLCPP_WARN(get_logger(), "E-stop is active. Ignoring motor commands.");
-            return;
-        }
-
-        double M1_counts_per_sec = velocity_to_counts_per_sec(msg.m1_vel);
-        double M2_counts_per_sec = velocity_to_counts_per_sec(msg.m2_vel);
-
-        if (!roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, M1_counts_per_sec)) {
-            RCLCPP_ERROR(get_logger(), "Failed to send command to M1 motor");
-        }
-        if (!roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, M2_counts_per_sec)) {
-            RCLCPP_ERROR(get_logger(), "Failed to send command to M2 motor");
-        }
-    }
-
-    void estop_callback(const std_msgs::msg::Bool::SharedPtr msg) {
-        estop_active_ = msg-&gt;data;
-
-        if (estop_active_) {
-            RCLCPP_WARN(get_logger(), "E-stop activated. Stopping all motors.");
-
-            // Send zero velocity commands to stop motors
-            roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, 0);
-            roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, 0);
-        } else {
-            RCLCPP_INFO(get_logger(), "E-stop deactivated. Resuming normal operation.");
-        }
-    }
+  RoboclawDriver roboclaw;
+  double crawler_circumference_;
+  int counts_per_rev_;
+  int gearhead_ratio_;
+  int pulley_ratio_;
+  double counts_per_meter_;
+  bool estop_active_ = false;    // E-stop state
+
+  rclcpp::Subscription&lt;custom_interfaces::msg::DriverVelocity&gt;::SharedPtr subscription_;
+  rclcpp::Subscription&lt;std_msgs::msg::Bool&gt;::SharedPtr estop_subscription_;
+
+  double velocity_to_counts_per_sec(double velocity) const
+  {
+    return velocity * counts_per_meter_;
+  }
+
+  void init()
+  {
+    roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, 0);
+    roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, 0);
+    roboclaw.setPIDConstants(M1_SET_PID_CONSTANTS_COMMAND, 0, 0, 0, QPPS);
+    roboclaw.setPIDConstants(M2_SET_PID_CONSTANTS_COMMAND, 0, 0, 0, QPPS);
+    roboclaw.resetEncoders();
+  }
+
+  void driver_callback(const custom_interfaces::msg::DriverVelocity &amp; msg)
+  {
+    if (estop_active_) {
+      RCLCPP_WARN(get_logger(), "E-stop is active. Ignoring motor commands.");
+      return;
+    }
+
+    double M1_counts_per_sec = velocity_to_counts_per_sec(msg.m1_vel);
+    double M2_counts_per_sec = velocity_to_counts_per_sec(msg.m2_vel);
+
+    if (!roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, M1_counts_per_sec)) {
+      RCLCPP_ERROR(get_logger(), "Failed to send command to M1 motor");
+    }
+    if (!roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, M2_counts_per_sec)) {
+      RCLCPP_ERROR(get_logger(), "Failed to send command to M2 motor");
+    }
+  }
+
+  void estop_callback(const std_msgs::msg::Bool::SharedPtr msg)
+  {
+    estop_active_ = msg-&gt;data;
+
+    if (estop_active_) {
+      RCLCPP_WARN(get_logger(), "E-stop activated. Stopping all motors.");
+
+      // Send zero velocity commands to stop motors
+      roboclaw.setMotorVelocity(M1_MOTOR_COMMAND, 0);
+      roboclaw.setMotorVelocity(M2_MOTOR_COMMAND, 0);
+    } else {
+      RCLCPP_INFO(get_logger(), "E-stop deactivated. Resuming normal operation.");
+    }
+  }
@@ -188,5 +208,6 @@
-int main(int argc, char* argv[]) {
-    rclcpp::init(argc, argv);
-    rclcpp::spin(std::make_shared&lt;Driver&gt;());
-    rclcpp::shutdown();
-    return 0;
+int main(int argc, char * argv[])
+{
+  rclcpp::init(argc, argv);
+  rclcpp::spin(std::make_shared&lt;Driver&gt;());
+  rclcpp::shutdown();
+  return 0;

1 files with code style divergence
-- run_test.py: return code 1
-- run_test.py: verify result file '/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/uncrustify.xunit.xml'
</Value>
				</Measurement>
			</Results>
			<Labels>
				<Label>linter</Label>
				<Label>uncrustify</Label>
			</Labels>
		</Test>
		<Test Status="passed">
			<Name>xmllint</Name>
			<Path>.</Path>
			<FullName>./xmllint</FullName>
			<FullCommandLine>/usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/xmllint.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/xmllint.xunit.xml"</FullCommandLine>
			<Results>
				<NamedMeasurement type="numeric/double" name="Execution Time">
					<Value>0.687568</Value>
				</NamedMeasurement>
				<NamedMeasurement type="numeric/double" name="Processors">
					<Value>1</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Completion Status">
					<Value>Completed</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Command Line">
					<Value>/usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/xmllint.xunit.xml" "--package-name" "driver" "--output-file" "/root/working/rodep_ros2/yano_ws/build/driver/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/xmllint.xunit.xml"</Value>
				</NamedMeasurement>
				<NamedMeasurement type="text/string" name="Environment">
					<Value>#CTEST_RESOURCE_GROUP_COUNT=</Value>
				</NamedMeasurement>
				<Measurement>
					<Value>-- run_test.py: invoking following command in '/root/working/rodep_ros2/yano_ws/src/driver':
 - /opt/ros/humble/bin/ament_xmllint --xunit-file /root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/xmllint.xunit.xml
File 'package.xml' is valid

No problems found
-- run_test.py: return code 0
-- run_test.py: verify result file '/root/working/rodep_ros2/yano_ws/build/driver/test_results/driver/xmllint.xunit.xml'
</Value>
				</Measurement>
			</Results>
			<Labels>
				<Label>linter</Label>
				<Label>xmllint</Label>
			</Labels>
		</Test>
		<EndDateTime>Mar 07 10:51 UTC</EndDateTime>
		<EndTestTime>1741344673</EndTestTime>
		<ElapsedMinutes>0</ElapsedMinutes>
	</Testing>
</Site>
