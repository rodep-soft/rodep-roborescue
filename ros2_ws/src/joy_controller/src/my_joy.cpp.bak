#include <chrono>
#include <functional>
#include <memory>
#include <string>

#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"
#include "sensor_msgs/msg/joy.hpp"

using namespace std::chrono_literals;

class JoySubscriber : public rclcpp::Node {
	public:
		JoySubscriber() : Node("joy_subscriber") {
			subscription_ = this->create_subscription<sensor_msgs::msg::Joy>("/joy", 10, std::bind(&JoySubscriber::joy_callback, this, std::placeholders::_1));
		}
	
	private:
		void joy_callback(const sensor_msgs::msg::Joy::SharedPtr msg) {
			// RCLCPP_INFO(this->get_logger(), "Axes: ");
			// for (const auto & axis : msg->axes) {
			// 	RCLCPP_INFO(this->get_logger(), "%f", axis);
			// }

			// RCLCPP_INFO(this->get_logger(), "Buttons: ");
			// for (const auto & button : msg->buttons) {
			// 	RCLCPP_INFO(this->get_logger() "%d", button);
			// }

            // if (msg->axes[0]) {
            //     RCLCPP_INFO(this->get_logger(), "You pressed Cross!");
            // } else if (msg->axes[1]) {
            //     RCLCPP_INFO(this->get_logger(), "You pressed Circle!");
            // } else if (msg->axes[2]) {
            //     RCLCPP_INFO(this->get_logger(), "You pressed Square!");
            // } else if (msg->axes[3]) {
            //     RCLCPP_INFO(this->get_logger(), "You pressed Triangle!");
            // }

            if (msg->axes[1] > 0.1) {
                RCLCPP_INFO(this->get_logger(), "Left Forward");
            } else if (msg->axes[1] < -0.1) {
                RCLCPP_INFO(this->get_logger(), "Left Backward");
            }
            if (msg->axes[3] > 0.1) {
                RCLCPP_INFO(this->get_logger(), "Right Forward");
            } else if (msg->axes[3] < -0.1) {
                RCLCPP_INFO(this->get_logger(), "Right Backward");
            }

		}


		rclcpp::Subscription<sensor_msgs::msg::Joy>::SharedPtr subscription_;
};



// main function
int main(int argc, char * argv[]) {
	rclcpp::init(argc, argv);
	rclcpp::spin(std::make_shared<JoySubscriber>());
	rclcpp::shutdown();
	return 0;

}
